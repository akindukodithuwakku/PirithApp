name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to build for (all, android, website)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - android
          - website
      build_type:
        description: "Build type (preview, production)"
        required: false
        default: "preview"
        type: choice
        options:
          - preview
          - production

concurrency:
  group: "build-and-deploy"
  cancel-in-progress: true

jobs:
  # Website deployment
  deploy-website:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.platform == 'website' || github.event.inputs.platform == 'all'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Create Build Info for Website
        run: |
          echo "Creating build info for website..."
          npm run manual-build-info c1faef92-05b4-45ea-be90-58f434f377e0
          echo "Build info created successfully!"
          echo "Contents of build-info.json:"
          cat build-info.json

      - name: Copy Build Info to Website Public
        run: |
          cp build-info.json website/public/
          echo "Copied build-info.json to website/public/"
          echo "Contents of website/public/build-info.json:"
          cat website/public/build-info.json
          echo "Verifying build-info.json exists in website/public:"
          ls -la website/public/build-info.json

      - name: Install website dependencies
        run: |
          cd website
          npm ci

      - name: Build website
        run: |
          cd website
          npm run build
          echo "Website build completed!"
          echo "Contents of build directory:"
          ls -la build/
          echo "Contents of build/build-info.json:"
          cat build/build-info.json
        env:
          REACT_APP_GITHUB_REPO: ${{ github.repository }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "website/build"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Android build info (using manual build ID)
  build-android:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all'
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      download-url: ${{ steps.build-info.outputs.download-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Create Android Build Info
        id: build-info
        run: |
          echo "Creating Android build info with manual build ID..."
          
          # Use the manual build ID from Expo
          BUILD_ID="c1faef92-05b4-45ea-be90-58f434f377e0"
          DOWNLOAD_URL="https://expo.dev/artifacts/eas/c1faef92-05b4-45ea-be90-58f434f377e0.apk"
          
          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "download-url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          
          echo "Android build info created!"
          echo "Build ID: $BUILD_ID"
          echo "Download URL: $DOWNLOAD_URL"

      - name: Create Android Build Info Files
        run: |
          echo "Creating Android build info files..."
          cat > android-build-info.json << EOF
          {
            "buildId": "${{ steps.build-info.outputs.build-id }}",
            "downloadUrl": "${{ steps.build-info.outputs.download-url }}",
            "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")",
            "version": "1.0.1",
            "platform": "android"
          }
          EOF
          echo "Android build info created:"
          cat android-build-info.json

          # Also update the main build-info.json
          cp android-build-info.json build-info.json

      - name: Upload Android Build Info
        uses: actions/upload-artifact@v4
        with:
          name: android-build-info
          path: android-build-info.json
          if-no-files-found: error

  # Create Android release
  create-android-release:
    needs: [build-android]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      needs.build-android.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android Build Info
        uses: actions/download-artifact@v4
        with:
          name: android-build-info
          path: ./artifacts

      - name: Create Android Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: android-v${{ github.run_number }}
          name: Android Release v${{ github.run_number }}
          body: |
            ## ThePirithApp Android Release v${{ github.run_number }}

            ### What's New
            - Latest updates and bug fixes
            - Enhanced user interface
            - Improved performance

            ### Downloads
            - **Android APK**: [Download from EAS](${{ needs.build-android.outputs.download-url }})

            ### Installation Instructions
            - **Android**: Download APK and enable "Install from unknown sources"

            Built automatically from commit: ${{ github.sha }}

            ### Build Information
            - Android Build ID: ${{ needs.build-android.outputs.build-id }}
            - Build Date: ${{ github.event.head_commit.timestamp }}
            - Build Type: ${{ github.event.inputs.build_type || 'preview' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
