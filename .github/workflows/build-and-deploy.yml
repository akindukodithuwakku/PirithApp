name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to build for (all, android, website)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - android
          - website

concurrency:
  group: "build-and-deploy"
  cancel-in-progress: true

jobs:
  # Website deployment
  deploy-website:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.platform == 'website' || github.event.inputs.platform == 'all'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install website dependencies
        run: |
          cd website
          npm ci

      - name: Build website
        run: |
          cd website
          npm run build
        env:
          REACT_APP_GITHUB_REPO: ${{ github.repository }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./website/build"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Android build
  build-android:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo CLI
        run: npm install -g @expo/cli eas-cli

      - name: Setup EAS Authentication
        run: |
          if [ -z "$EXPO_TOKEN" ]; then
            echo "Error: EXPO_TOKEN is not set or is empty"
            exit 1
          fi
          echo "EXPO_TOKEN is set and ready for EAS authentication"
          # EAS CLI will automatically use EXPO_TOKEN environment variable
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Check for recent builds
        id: check-builds
        run: |
          # Check if there's a recent successful build (within last 2 hours)
          RECENT_BUILD=$(eas build:list --platform android --status finished --limit 1 --json | jq -r '.[0] | select(.createdAt > (now - 7200 | strftime("%Y-%m-%dT%H:%M:%S.000Z"))) | .id')
          if [ -n "$RECENT_BUILD" ]; then
            echo "Recent build found: $RECENT_BUILD"
            echo "skip_build=true" >> $GITHUB_OUTPUT
            echo "build_id=$RECENT_BUILD" >> $GITHUB_OUTPUT
          else
            echo "No recent build found, will create new build"
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK
        if: steps.check-builds.outputs.skip_build != 'true'
        run: |
          # Run the cloud build without --output
          eas build --platform android --profile preview --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          REACT_APP_GITHUB_REPO: ${{ github.repository }}

      - name: Download Android APK
        run: |
          # Use the build ID from the check step or get the latest
          if [ "${{ steps.check-builds.outputs.skip_build }}" = "true" ]; then
            BUILD_ID="${{ steps.check-builds.outputs.build_id }}"
            echo "Using existing build ID: $BUILD_ID"
          else
            BUILD_ID=$(eas build:list --platform android --status finished --limit 1 --json | jq -r '.[0].id')
            echo "Using new build ID: $BUILD_ID"
          fi
          eas build:download $BUILD_ID --path ./android-release.apk
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ./android-release.apk
          if-no-files-found: error

  # Create release with Android build
  create-release:
    needs: [build-android]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      needs.build-android.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## ThePirithApp Release v${{ github.run_number }}

            ### What's New
            - Latest updates and bug fixes

            ### Downloads
            - **Android APK**: Direct installation for Android devices

            ### Installation Instructions
            - **Android**: Download APK and enable "Install from unknown sources"

            Built automatically from commit: ${{ github.sha }}
          files: |
            ./artifacts/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
